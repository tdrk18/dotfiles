" ファイルタイプを一旦無効化し、最後に有効にする
filetype off
filetype plugin indent off
" --------------------
"
"   NeoBundle
"
" --------------------
if has('vim_starting')
    execute 'set runtimepath+=' . expand('~/.vim/bundle/neobundle.vim')
endif
call neobundle#begin(expand('~/.vim/bundle'))
    NeoBundleFetch 'Shougo/neobundle.vim'
    " 多機能セレクタ
    NeoBundle 'ctrlpvim/ctrlp.vim'
    " ディレクトリをツリー操作
    NeoBundle 'scrooloose/nerdtree'
    " 構文エラーチェック
    NeoBundle 'scrooloose/syntastic'
    " 閉じ括弧などを補完
    " NeoBundle 'Townk/vim-autoclose'  "これだとneocompleteと相性が悪かった
    NeoBundle 'Raimondi/delimitMate'
    " emmet(HTMLやCSSの入力効率化)
    NeoBundle 'mattn/emmet-vim'
    " プログラムの即時実行
    NeoBundle 'thinca/vim-quickrun'
    " vim上でgrep
    NeoBundle 'grep.vim'
    " 強力補完
    NeoBundle 'Shougo/neocomplete.vim'
    " vimshell
    NeoBundle 'Shougo/vimshell'
    " 非同期処理を可能に
    NeoBundle 'Shougo/vimproc', {
        \ 'build' : {
            \ 'mac' : 'make -f make_mac.mak',
            \ 'unix' : 'make -f make_unix.mak',
            \},
        \ }
    " ドキュメント(リファレンス)参照
    NeoBundle 'thinca/vim-ref'
    NeoBundle 'yuku-t/vim-ref-ri'
    " Markdownをプレビュー
    NeoBundle 'plasticboy/vim-markdown'
    NeoBundle 'kannokanno/previm'
    NeoBundle 'tyru/open-browser.vim'
    " ステータスラインを綺麗に
    NeoBundle 'itchyny/lightline.vim'
    " gitステータスを表示
    NeoBundle 'airblade/vim-gitgutter'
    " classやmethodの一覧表示
    NeoBundle 'majutsushi/tagbar'
    " powerline表示
    NeoBundle 'alpaca-tc/alpaca_powertabline'
    NeoBundle 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim'}
    NeoBundle 'Lokaltog/powerline-fontpatcher'
    " vimをIDEっぽくする
    NeoBundle 'Shougo/unite.vim'
    NeoBundle 'Shougo/neomru.vim'
    " ファイル操作をサポート
    NeoBundle 'Shougo/vimfiler.vim'
    " インデントに色をつける
    NeoBundle 'nathanaelkane/vim-indent-guides'
    " コメントON/OFFを手軽に実行
    NeoBundle 'tomtom/tcomment_vim'
    " オープニングページを変更
    NeoBundle 'mhinz/vim-startify'
    " Rubyのif...endやdef...endなどの対応を自動入力
    NeoBundle 'tpope/vim-endwise'
    " c++の補完
    NeoBundle 'Rip-Rip/clang_complete'
    " pythonでpep8準拠インデント
    NeoBundle 'hynek/vim-python-pep8-indent'
    " pythonの補完
    NeoBundle 'davidhalter/jedi-vim'
    " rsense
    NeoBundle 'vim-scripts/ruby-matchit', { "autoload" : {
        \ "filetypes" : [ "ruby", "eruby" ] } }
    NeoBundleLazy 'marcus/rsense', {
          \ 'autoload': {
          \   'filetypes': 'ruby',
          \ },
        \ }
    " let g:rsenseUseOmniFunc = 1
    NeoBundleLazy 'supermomonga/neocomplete-rsense.vim', { 'autoload' : {
          \ 'insert' : 1,
          \ 'filetypes': 'ruby',
        \ }}
    " rubyのローカル変数をハイライト
    NeoBundleLazy 'todesking/ruby_hl_lvar.vim', {
          \   'autoload': {
          \     'filetypes': ['ruby']
        \ }}
    " rubyのシンタックスハイライト
    NeoBundle     'vim-ruby/vim-ruby'
    " sessionを保存
    NeoBundle 'xolox/vim-session', {
          \ 'depends' : 'xolox/vim-misc',
        \ }
    " crystalのシンタックス
    NeoBundle 'rhysd/vim-crystal'
    " coffee scriptのシンタックス
    NeoBundle 'kchmck/vim-coffee-script'
    " vimdiffの色合い設定
    NeoBundle 'lambdalisue/vim-unified-diff'
call neobundle#end()


" --------------------
"
" syntastic
"
" --------------------
let g:syntastic_ignore_files=['\.tex$']


" --------------------
"
" vim-unified-diff
"
" --------------------
set diffexpr=unified_diff#diffexpr()

" configure with the followings (default values are shown below)
let unified_diff#executable = 'git'
let unified_diff#arguments = [
      \   'diff', '--no-index', '--no-color', '--no-ext-diff', '--unified=0',
      \ ]
let unified_diff#iwhite_arguments = [
      \   '--ignore--all-space',
      \ ]


" --------------------
"
"  functions
"
" --------------------
" 背景透過を切り替える
function! s:toggle_transparence()
    if &transparency == 15
        set transparency=0
    else
        set transparency=15
    endif
endfunction


" vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup = 1
" vim-quickrunの設定
let g:quickrun_config={'_': {'split': 'vertical'}}
let g:quickrun_config['tex'] = {
            \ 'command' : 'latexmk',
            \ 'cmdopt'  : '-pv'
            \ }
" tex関係
let g:tex_flavor = "latex"

" --------------------
"
"  neocomplete
"
" --------------------
""use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#auto_completion_start_length = 3
let g:neocomplete#manual_completion_start_length = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#min_keyword_length = 2
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
let g:neocomplete#enable_complete_select = 0
let g:neocomplete#enable_auto_select = 0
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
\ 'default' : '',
\ 'vimshell' : $HOME.'/.vimshell_hist',
\ 'ruby': $HOME.'/lib/vim/dicts/ruby.dict',
\ }
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] ='\h\w*'
" .や::を入力したときにオムニ補完が有効になるようにする
let g:rsenseHome = '/usr/local/Cellar/rsense/0.3/libexec'
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.ruby =
            \ '[^. *\t]\.\w*\|\h\w*::'
" if !exists('g:neocomplete#force_omni_input_patterns')
    " let g:neocomplete#force_omni_input_patterns = {}
" endif
" let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
" 環境変数RSENSE_HOMEに'/usr/local/bin/rsense'を指定しても動く
let g:neocomplete#sources#rsense#home_directory = '/usr/local/bin/rsense'
" setting for ruby_hl_lvar
let s:bundle = neobundle#get('ruby_hl_lvar.vim')
function! s:bundle.hooks.on_post_source(bundle)
  silent! execute 'doautocmd FileType' &filetype
endfunction
unlet s:bundle


" --------------------
"
"  jedi
"
" --------------------
" quickrunとかぶるので大文字に変更
let g:jedi#rename_command = '<Leader> R'


" --------------------
"
"  gitgutter
"
" --------------------
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'


" --------------------
"
"  clang_complete
"
" --------------------
let g:clang_periodic_quickfix = 1
let g:clang_complete_copen = 1
let g:clang_use_library = 1
" this need to be updated on llvm update 以下のパスにlibclang.soが必要
if has('mac')
    let g:clang_library_path = '/Library/Developer/CommandLineTools/usr/lib'
endif
if has('unix')
    let g:clang_library_path = '/usr/lib'
endif
" specify compiler options
let g:clang_user_options = '-std=c++11 -stdlib=libc++'


" --------------------
"
"  tabline
"
" --------------------
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['fugitive', 'gitgutter', 'filename'],
        \   ],
        \   'right': [
        \     ['lineinfo', 'syntastic'],
        \     ['percent'],
        \     ['fileformat', 'fileencoding', 'filetype'],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \   'syntastic': 'SyntasticStatuslineFlag',
        \   'charcode': 'MyCharCode',
        \   'gitgutter': 'MyGitGutter',
        \ },
        \ 'separator': {'left': '⮀', 'right': '⮂'},
        \ 'subseparator': {'left': '⮁', 'right': '⮃'}
        \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? '⭠ '._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction


" --------------------
"
"  keymap
"
" --------------------
" ###############
"  NORMAL mode
" ###############
noremap <C-a> :NERDTreeToggle<CR>
" ,is:シェルを起動
nnoremap <silent>,is :VimShell<CR>
" ,ipy: pythonを非同期で起動
nnoremap <silent> ,ipy :VimShellInteractive python -i<CR>
" ,irb: irbを非同期で起動
nnoremap <silent> ,irb :VimShellInteractive irb<CR>
" 選択中に,ss: 非同期で開いたインタプリタに選択行を評価させる
nnoremap <silent> ,ss <S-v>:VimShellSendString<CR>
" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ
map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" map <silent> L :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" map <silent> H :tabprevious<CR>
" tp 前のタブ
" Ecs2回押すとハイライト解除
nmap <silent> <Esc><Esc> :nohlsearch<CR>
"" unite.vim {{{
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    <Space>f [unite]
" unite.vim keymap
" https://github.com/alwei/dotfiles/blob/3760650625663f3b08f24bc75762ec843ca7e112/.vimrc
nnoremap [unite]u  :<C-u>Unite -no-split<Space>
nnoremap <silent> [unite]f :<C-u>Unite<Space>buffer<CR>
nnoremap <silent> [unite]b :<C-u>Unite<Space>bookmark<CR>
"ブックマークに追加
nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>
nnoremap <silent> [unite]m :<C-u>Unite<Space>file_mru<CR>
nnoremap <silent> [unite]r :<C-u>UniteWithBufferDir file<CR>
nnoremap <silent> ,vr :UniteResume<CR>
" unite-build map
nnoremap <silent> ,vb :Unite build<CR>
nnoremap <silent> ,vcb :Unite build:!<CR>
nnoremap <silent> ,vch :UniteBuildClearHighlight<CR>
"" }}}
" 背景設定
nnoremap <silent> <Space>oT :<C-u>call <SID>toggle_transparence()<CR>
" コメントアウト
noremap <C-c><C-c> :TComment<CR>
" Tagbar
nmap <F8> :TagbarToggle<CR>
" Markdown
noremap <C-m> :PrevimOpen<CR>


" ###############
"  INSERT mode
" ###############
" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" キー移動
inoremap <c-a> <home>
inoremap <c-e> <end>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-h> <left>
inoremap <c-l> <right>
inoremap <silent> <C-f> <S-Right>
inoremap <silent> <C-b> <S-Left>
inoremap <silent> <c-d> <c-g>u<Del>
inoremap <silent> <c-g> <c-g>u<BS>
inoremap <silent> jj <Esc>
" コメントアウト
inoremap <C-c><C-c> <Esc>:TComment<CR><Insert>


" ###############
"  VISUAL mode
" ###############
" ,ss: 非同期で開いたインタプリタに現在の行を評価させる
vmap <silent> ,ss :VimShellSendString<CR>


" --------------------
"
"  settings
"
" --------------------
" vi互換モードにならないようにする
set nocompatible
" 構文により色をつける
syntax on
" filetypeの自動検出
filetype on
" filetype別のプラグインをonにする
filetype plugin on
" filetype別のインデント設定をonにする
filetype indent on
" マクロなどの途中描画をしない
set lazyredraw
"encoding setting
scriptencoding utf-8
set encoding=utf-8
"フォント
set guifont=Ricty:h16
"F12を押すとペーストモードに
set pastetoggle=<F12>
" 256色ターミナルに対応
set t_Co=256
" カラースキーム
colorscheme railscasts
"タブやインデントの設定
" タブ入力を空白文字に置き換え
set expandtab
" タブ文字の幅
set tabstop=4
" 自動インデントの幅
set shiftwidth=4
" 連続空白に対してタブキーやバックスペースキーでカーソルが動く幅
set softtabstop=4
" 改行時に前の行のインデントを継続
set autoindent
" 改行時に入力された行の末尾に合わせて次の行のインデントを決める
set smartindent
" 行番号の表示
set number
" カーソル行の背景色を変える
set cursorline
" カーソル列の背景色を変える
" set cursorcolumn
" ステータスラインを常に表示
set laststatus=2
" メッセージ表示欄を2行確保
set cmdheight=2
" 常にタブラインを表示
set showtabline=2
" 対応する括弧を強調表示
set showmatch
" ヘルプを画面いっぱいに開く
set helpheight=999
" 不可視文字を表示
set list
" 表示する不可視文字を指定
set listchars=trail:_,extends:>,precedes:<,nbsp:%,eol:↲,tab:▸\
"ファイル関係
" 終了時に未保存のファイルがあるときに保存確認
set confirm
" 未保存ファイルがあるときでも別ファイルを開ける
set hidden
" 外部でファイルが変更されたときに読み直す
set autoread
" ファイル保存時にバックアップファイルを作らない
set nobackup
" ファイル編集中にスワップファイルを作らない
set noswapfile
" INSERTモードでバックスペースキーで文字の消去ができるように設定
set backspace=indent,eol,start
" 検索文字列をハイライト
set hlsearch
" インクリメンタルサーチ
set incsearch
" 大文字と小文字を区別しない
set ignorecase
" 大文字と小文字が混在した状態で検索したときに限り大文字と小文字を区別
set smartcase
" 最後尾まで検索し終わったら先頭から検索し直す
set wrapscan
" 置換のgオプションをデフォルトで有効にする
set gdefault
"コマンドラインモードでTABキーによるファイル名補完を有効にする
set wildmenu wildmode=list:longest,full
" コマンドラインの履歴を10000件保存する
set history=10000
" :vsのとき新しいウインドウを右側に開く
set splitright
" :spのとき新しいウインドウを下側に開く
set splitbelow
" 保存時に行末の空白を除去する
autocmd BufWritePre * :%s/\s\+$//ge
" insertモードでカーソルの形を変える
if !has('gui_running')
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
"入力モード時、ステータスラインのカラーを変更
augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END
"全角スペースを視覚化
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666
au BufNewFile,BufRead * match ZenkakuSpace /　/
" ペーストしたときに自動インデントを無効にする
if &term =~ "xterm"
    let &t_ti .= "\e[?2004h"
    let &t_te .= "\e[?2004l"
    let &pastetoggle = "\e[201~"

    function XTermPasteBegin(ret)
        set paste
        return a:ret
    endfunction

    noremap <special> <expr> <Esc>[200~ XTermPasteBegin("0i")
    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
    cnoremap <special> <Esc>[200~ <nop>
    cnoremap <special> <Esc>[201~ <nop>
endif
" Markdownの設定
augroup PrevimSettings
    autocmd!
    autocmd BufRead,BufNewFile *.md set filetype=markdown
augroup END
let g:previm_open_cmd = 'open -a Google\ Chrome'
" let g:previm_open_cmd = 'open -a Firefox'

" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
" Uniteの設定
let g:unite_source_file_mru_limit = 50
"file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
let g:unite_source_file_mru_filename_format = ''
" NERDTree
" 隠しファイルを表示する
let NERDTreeShowHidden = 1


" --------------------
"
"  macvim
"
" --------------------
if has('gui_macvim')
    set transparency=10
endif


" --------------------
"
"  vim-session
"
" --------------------
" 現在のディレクトリ直下の .vimsessions/ を取得
let s:local_session_directory = xolox#misc#path#merge(getcwd(), '.vimsessions')
" 存在すれば
if isdirectory(s:local_session_directory)
  " session保存ディレクトリをそのディレクトリの設定
  let g:session_directory = s:local_session_directory
  " vim終了時に自動保存
  let g:session_autosave = 'yes'
  " 引数なしでvimを起動した時にsession保存ディレクトリのdefault.vimを開く
  let g:session_autoload = 'yes'
  " 5分間に1回自動保存
  let g:session_autosave_periodic = 5
else
  let g:session_autosave = 'no'
  let g:session_autoload = 'no'
endif
unlet s:local_session_directory


" --------------------
"
"  SyntaxInfo
"
" --------------------
function! s:get_syn_id(transparent)
  let synid = synID(line("."), col("."), 1)
  if a:transparent
    return synIDtrans(synid)
  else
    return synid
  endif
endfunction
function! s:get_syn_attr(synid)
  let name = synIDattr(a:synid, "name")
  let ctermfg = synIDattr(a:synid, "fg", "cterm")
  let ctermbg = synIDattr(a:synid, "bg", "cterm")
  let guifg = synIDattr(a:synid, "fg", "gui")
  let guibg = synIDattr(a:synid, "bg", "gui")
  return {
        \ "name": name,
        \ "ctermfg": ctermfg,
        \ "ctermbg": ctermbg,
        \ "guifg": guifg,
        \ "guibg": guibg}
endfunction
function! s:get_syn_info()
  let baseSyn = s:get_syn_attr(s:get_syn_id(0))
  echo "name: " . baseSyn.name .
        \ " ctermfg: " . baseSyn.ctermfg .
        \ " ctermbg: " . baseSyn.ctermbg .
        \ " guifg: " . baseSyn.guifg .
        \ " guibg: " . baseSyn.guibg
  let linkedSyn = s:get_syn_attr(s:get_syn_id(1))
  echo "link to"
  echo "name: " . linkedSyn.name .
        \ " ctermfg: " . linkedSyn.ctermfg .
        \ " ctermbg: " . linkedSyn.ctermbg .
        \ " guifg: " . linkedSyn.guifg .
        \ " guibg: " . linkedSyn.guibg
endfunction
command! SyntaxInfo call s:get_syn_info()
