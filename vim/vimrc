

"neobundle関係"{{{
"始めて使うPCでは必ずNeobundleを入れること
set nocompatible

if has('vim_starting')
    filetype plugin off
      filetype indent off
        execute 'set runtimepath+=' . expand('~/.vim/bundle/neobundle.vim')
      endif
      " call neobundle#rc(expand('~/.vim/bundle'))
      call neobundle#begin(expand('~/.vim/bundle/'))
      NeoBundleFetch 'Shougo/neobundle.vim'
      call neobundle#end()

      NeoBundle 'git://github.com/kien/ctrlp.vim.git'
      " NeoBundle 'git://github.com/Shougo/neobundle.vim.git'
      NeoBundle 'git://github.com/scrooloose/nerdtree.git'
      NeoBundle 'git://github.com/scrooloose/syntastic.git'
      NeoBundle 'Townk/vim-autoclose'
      NeoBundle 'mattn/emmet-vim'
      " プログラムの即時実行
      NeoBundle 'thinca/vim-quickrun'
      let g:quickrun_config={'_': {'split': 'vertical'}}
      set splitright
      NeoBundle 'grep.vim'
      NeoBundle 'Shougo/neocomplcache'
      " NeoBundle 'Shougo/neosnippet'
      NeoBundle 'Shougo/vimshell'
      NeoBundle 'Shougo/vimproc'
      "NeoBundle 'supermomonga/vimshell_kawaii'
      "NeoBundle 'TwitVim'
      "NeoBundle 'basyura/twibill.vim'
      "NeoBundle 'https://github.com/basyura/bitly.vim.git'
      "NeoBundle 'https://github.com/basyura/TweetVim.git'
      "NeoBundle 'https://github.com/basyura/twibill.vim.git'
      "NeoBundle 'https://github.com/h1mesuke/unite-outline.git'
      NeoBundle 'https://github.com/mattn/webapi-vim.git'
      NeoBundle 'https://github.com/tyru/open-browser.vim.git'
      " NeoBundle 'https://github.com/yomi322/neco-tweetvim.git'
      "NeoBundle 'https://github.com/yomi322/unite-tweetvim.git'
      NeoBundle 'itchyny/lightline.vim'
      NeoBundle 'tpope/vim-fugitive'
      NeoBundle 'airblade/vim-gitgutter'
      NeoBundle 'majutsushi/tagbar'
      NeoBundle 'kannokanno/previm'
      NeoBundle 'rbtnn/puyo.vim'
      NeoBundle 'alpaca-tc/alpaca_powertabline'
      NeoBundle 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim'} 
      NeoBundle 'Shougo/vimfiler.vim'
      NeoBundle 'Shougo/unite.vim'
      NeoBundle 'Shougo/neomru.vim'
      " インデントに色を付けて見やすくする
      NeoBundle 'nathanaelkane/vim-indent-guides'
      " vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
      let g:indent_guides_enable_on_vim_startup = 1
      " コメントON/OFFを手軽に実行
      NeoBundle 'tomtom/tcomment_vim'
      " オープニングページを変更
      NeoBundle 'mhinz/vim-startify'
      " rubyのif...endやdef...endなどの対応する文字を自動で出してくれる
      NeoBundle 'https://github.com/tpope/vim-endwise'
      " c++の補完 clang_complete
      NeoBundle 'Rip-Rip/clang_complete'
      let g:clang_periodic_quickfix = 1
      let g:clang_complete_copen = 1
      let g:clang_use_library = 1
      " this need to be updated on llvm update 以下のパスにlibclang.soが必要
      let g:clang_library_path = '/usr/lib/llvm-3.4/lib'
      " specify compiler options
      let g:clang_user_options = '-std=c++11 -stdlib=libc++'
      " neocomplcacheとの競業回避
      let g:neocomplcache_force_overwrite_completefunc=1

      NeoBundleLazy "vim-scripts/TaskList.vim", {
                  \ "autoload": {
                  \ "mappings": ['<Plug>TaskList'],
                  \}}
      nmap <Leader>T <plug>TaskList

      NeoBundleLazy "davidhalter/jedi-vim", {
                  \ "autoload": {
                  \  "filetypes": ["python", "python3", "djangohtml"],
                  \ },
                  \ "build": {
                  \   "mac": "pip install jedi",
                  \   "unix": "pip install jedi",
                  \ }}
      let s:hooks = neobundle#get_hooks("jedi-vim")
      function! s:hooks.on_source(bundle)
            " jediにvimの設定を任せると'completeopt+=preview'するので
            " 自動設定機能をOFFにし手動で設定を行う
            let g:jedi#auto_vim_configuration = 0
            " 補完の最初の項目が選択された状態だと使いにくいためオフにする
            " let g:jedi#popup_select_first = 0
            let g:jedi#completions_enabled = 0
            let g:jedi#auto_vim_configuration = 0
            " let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
            " quickrunと被るため大文字に変更
            let g:jedi#rename_command = '<Leader>R'
            " gundoと被るため大文字に変更
            let g:jedi#goto_assignments_command = '<Leader>G'
      endfunction

      syntax on
      filetype plugin on
      filetype indent on

      " SSH クライアントの設定によってはマウスが使える（putty
      " だと最初からいける）
      " set mouse=n
"}}}


"快適化のための設定
set lazyredraw

"encoding setting
scriptencoding utf-8
set encoding=utf-8

"フォント
set guifont=Ricty

"{{{ }}}で折りたたみ
"set foldmethod=marker


"F12を押すとペーストモードに
set pastetoggle=<F12>
set nohlsearch
set t_Co=256
" colorscheme molokai
" colorscheme twilight
" colorscheme wombat
colorscheme railscasts
syntax on
filetype plugin indent on

"タブやインデントの設定
set expandtab     " タブ入力を複数の空白入力に置き換える
set tabstop=4     " 画面上でタブ文字が占める幅
set shiftwidth=4  " 自動インデントでずれる幅
set softtabstop=4 " 連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
set autoindent    " 改行時に前の行のインデントを継続する
set smartindent   " 改行時に入力された行の末尾に合わせて次の行のインデントを増減する

"コマンドエイリアス
"
"nnoremap <silent>,tt :FriendsTwitter<CR> <C-w><C-w>
"nnoremap <silent>,tn :NextTwitter<CR>
"nnoremap <silent>,tp :PosttoTwitter<CR>
"nnoremap <silent>,tm :MentionsTwitter<CR> <C-w><C-w>


noremap <C-a> :NERDTreeToggle<CR>
" ,is:シェルを起動
nnoremap <silent>,is :VimShell<CR>
" ,ipy: pythonを非同期で起動
nnoremap <silent> ,ipy :VimShellInteractive python -i<CR>
" ,irb: irbを非同期で起動
nnoremap <silent> ,irb :VimShellInteractive irb<CR>
" ,ss: 非同期で開いたインタプリタに現在の行を評価させる
vmap <silent> ,ss :VimShellSendString<CR>
" 選択中に,ss: 非同期で開いたインタプリタに選択行を評価させる
nnoremap <silent> ,ss <S-v>:VimShellSendString<CR>

"入力モード時、ステータスラインのカラーを変更
augroup InsertHook
autocmd!
autocmd InsertEnter * highlight StatusLine guifg=#ccdc90 guibg=#2E4340
autocmd InsertLeave * highlight StatusLine guifg=#2E4340 guibg=#ccdc90
augroup END

"全角スペースを視覚化
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=#666666
au BufNewFile,BufRead * match ZenkakuSpace /　/

"クリップボードをWindowsと連携
set clipboard=unnamed
set number
set cursorline     " カーソル行の背景色を変える
"set cursorcolumn   " カーソル位置のカラムの背景色を変える
set laststatus=2   " ステータス行を常に表示
set cmdheight=2    " メッセージ表示欄を2行確保
set showmatch      " 対応する括弧を強調表示
set helpheight=999 " ヘルプを画面いっぱいに開く
set list           " 不可視文字を表示

"ファイル関係
set confirm    " 保存されていないファイルがあるときは終了前に保存確認
set hidden     " 保存されていないファイルがあるときでも別のファイルを開くことが出来る
set autoread   "外部でファイルに変更がされた場合は読みなおす
set nobackup   " ファイル保存時にバックアップファイルを作らない
set noswapfile " ファイル編集中にスワップファイルを作らない



"検索、置換の設定
set backspace=indent,eol,start

set hlsearch   " 検索文字列をハイライトする
set incsearch  " インクリメンタルサーチを行う
set ignorecase " 大文字と小文字を区別しない
set smartcase  " 大文字と小文字が混在した言葉で検索を行った場合に限り、大文字と小文字を区別する
set wrapscan   " 最後尾まで検索を終えたら次の検索で先頭に移る
set gdefault   " 置換の時 g オプションをデフォルトで有効にする

"コマンドラインモードでTABキーによるファイル名補完を有効にする
set wildmenu wildmode=list:longest,full
" コマンドラインの履歴を10000件保存する
set history=10000

"inoremap <C-g> <Esc>
inoremap <C-f> <Esc>

" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
"map <silent> [Tag]n :tabnext<CR>
map <silent> L :tabnext<CR>
" tn 次のタブ
"map <silent> [Tag]p :tabprevious<CR>
map <silent> H :tabprevious<CR>
" tp 前のタブ

" Ecs2回押すとハイライト解除
nmap <silent> <Esc><Esc> :nohlsearch<CR>

"" unite.vim {{{
" The prefix key.
nnoremap    [unite]   <Nop>
nmap    <Space>f [unite]
 
" unite.vim keymap
" https://github.com/alwei/dotfiles/blob/3760650625663f3b08f24bc75762ec843ca7e112/.vimrc
nnoremap [unite]u  :<C-u>Unite -no-split<Space>
nnoremap <silent> [unite]f :<C-u>Unite<Space>buffer<CR>
nnoremap <silent> [unite]b :<C-u>Unite<Space>bookmark<CR>
"ブックマークに追加
nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>
nnoremap <silent> [unite]m :<C-u>Unite<Space>file_mru<CR>
nnoremap <silent> [unite]r :<C-u>UniteWithBufferDir file<CR>
nnoremap <silent> ,vr :UniteResume<CR>
 
" vinarise
let g:vinarise_enable_auto_detect = 1
" インサートモードで開始
"let g:unite_enable_start_insert=1
let g:unite_source_file_mru_limit = 50
"file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
let g:unite_source_file_mru_filename_format = ''

" unite-build map
nnoremap <silent> ,vb :Unite build<CR>
nnoremap <silent> ,vcb :Unite build:!<CR>
nnoremap <silent> ,vch :UniteBuildClearHighlight<CR>
"" }}}

"" neocomplcache{{{
NeoBundle 'Shougo/neocomplcache'
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplcache.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplcache_min_syntax_length = 3
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplcache_dictionary_filetype_lists = {
    \ 'default' : ''
    \ }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplcache#smart_close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()
"}}}

"twitvim
"let twitvim_count = 50
" ----- key bind settings -----
" インサートモードのキーバインド
inoremap <c-a> <home>
inoremap <c-e> <end>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-h> <left>
inoremap <c-l> <right>
inoremap <silent> <C-f> <S-Right>
inoremap <silent> <C-b> <S-Left>
inoremap <silent> <c-d> <c-g>u<Del>
inoremap <silent> <c-g> <c-g>u<BS>


"{{{ タブラインの設定:Ricty fontが必要かも
" vim-gitgutter
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
"
" lightline.vim"{{{
" ##############################
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['fugitive', 'gitgutter', 'filename'],
        \   ],
        \   'right': [
        \     ['lineinfo', 'syntastic'],
        \     ['percent'],
        \     ['fileformat', 'fileencoding', 'filetype'],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'readonly': 'MyReadonly',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \   'syntastic': 'SyntasticStatuslineFlag',
        \   'charcode': 'MyCharCode',
        \   'gitgutter': 'MyGitGutter',
        \ },
        \ 'separator': {'left': '⮀', 'right': '⮂'},
        \ 'subseparator': {'left': '⮁', 'right': '⮃'}
        \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? '⭠ '._ : ''
    endif
  catch
  endtry
  return ''
endfunction



" ##############################

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
"function! MyCharCode()
"  if winwidth('.') <= 70
"    return ''
"  endif
"
"  " Get the output of :ascii
"  redir => ascii
"  silent! ascii
"  redir END
"
"  if match(ascii, 'NUL') != -1
"    return 'NUL'
"  endif
"
"  " Zero pad hex values
"  let nrformat = '0x%02x'
"
"  let encoding = (&fenc == '' ? &enc : &fenc)
"
"  if encoding == 'utf-8'
"    " Zero pad with 4 zeroes in unicode files
"    let nrformat = '0x%04x'
"  endif
"
"  " Get the character and the numeric value from the return value of :ascii
"  " This matches the two first pieces of the return value, e.g.
"  " "<F>  70" => char: 'F', nr: '70'
"  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')
"
"  " Format the numeric value
"  let nr = printf(nrformat, nr)
"
"  return "'". char ."' ". nr
"endfunction
