# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/workspace/project/dotfiles/zsh/zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/workspace/project/dotfiles/zsh/zprezto/init.zsh"
fi

# 自動補完
autoload -U compinit; compinit

# コマンドの途中でもカーソル位置で補完
setopt complete_in_word

# カーソル位置を保持してファイル名一覧を補完
setopt always_last_prompt

# ディレクトリ名を直接入力するとそこに移動する
setopt auto_cd

# cdした先のディレクトリをディレクトリスタックに保存
setopt auto_pushd

# pushdしたとき、すでにスタックにあれば保存しない
setopt pushd_ignore_dups

# 先頭がスペースのときスタックに保存しない
setopt hist_ignore_space

# 色を使う
setopt prompt_subst

# ヒストリを保存するファイル
HISTFILE=$HOME/.zsh_history

# メモリ上のヒストリ数
HISTSIZE=1000000
SAVEHIST=$HISTSIZE

# 直前と同じコマンドをヒストリに追加しない
setopt hist_ignore_dups

# すぐにヒストリファイルに追記
setopt inc_append_history

# zshプロセス間でヒストリを共有
setopt share_history

# 実行したプロセスが30秒以上かかったらその時間を表示する
REPORTTIME=30

# タブ名を'title hogehoge'でhogehogeに変更する
function title {
    echo -ne "\033]0;"$*"\007"
}

# Ctrl+dでログアウトしないようにする
setopt ignoreeof

# Ctrl+sを使えるようにする
stty stop undef

# pecoを使ってコマンド履歴を表示する
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER" --prompt='History>')
    CURSOR=$#BUFFER
    # zle clear-screen
    # zle accept-line
}
zle -N peco-select-history
bindkey '^r' peco-select-history

function peco-find() {
    local current_buffer=$BUFFER
    local search_root=""
    local file_path=""
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        search_root=`git rev-parse --show-toplevel`
    else
        search_root=`pwd`
    fi
    file_path="$(find ${search_root} -maxdepth 5 -type d ! -path "*/.*" | peco --prompt='Find>')"
    BUFFER="${current_buffer} ${file_path}"
    CURSOR=$#BUFFER
    # zle clear-screen
    zle accept-line
}
zle -N peco-find
bindkey '^f' peco-find

function peco_select_from_git_status(){
    git status --short | \
        peco --prompt='git status>'| \
        awk -F ' ' '{print $NF}' | \
        tr '\n' ' '
}
function peco_insert_selected_git_files(){
    LBUFFER+=$(peco_select_from_git_status)
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_selected_git_files

function peco_select_from_svn_status(){
    svn status | \
    peco --prompt='svn status>'| \
    awk -F ' ' '{print $NF}' | \
    tr '\n' ' '
}
function peco_insert_selected_svn_files(){
    LBUFFER+=$(peco_select_from_svn_status)
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_selected_svn_files

function peco_insert_select_vcsadd(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER+="git add $(peco_select_from_git_status)"
    elif svn info>/dev/null 2>&1; then
        LBUFFER+="svn add $(peco_select_from_svn_status)"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_select_vcsadd
bindkey "^g^a" peco_insert_select_vcsadd

function peco_insert_select_vcsdiff(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER+="git icdiff $(peco_select_from_git_status)"
    elif svn info>/dev/null 2>&1; then
        LBUFFER+="svn diff $(peco_select_from_svn_status)"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_select_vcsdiff
bindkey "^g^d" peco_insert_select_vcsdiff

function peco_select_from_git_branchs(){
    git branch --list | \
        peco --prompt='Branch>'| \
        awk -F ' ' '{print $NF}' | \
        tr '\n' ' '
}
zle -N peco_select_from_git_branchs
function peco_insert_select_gitcheckout(){
    LBUFFER+="git checkout $(peco_select_from_git_branchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_select_gitcheckout
bindkey "^g^b" peco_insert_select_gitcheckout

function peco_select_from_git_remotes(){
    git remote | \
        peco --prompt='Remote>'| \
        tr '\n' ' '
}
zle -N peco_select_from_git_remotes
function peco_insert_select_gitpush(){
    LBUFFER="git push $(peco_select_from_git_remotes) $(peco_select_from_git_branchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_select_gitpush
bindkey "^g^p" peco_insert_select_gitpush

function peco_select_from_git_allbranchs(){
    git branch --all | \
        peco --prompt='Branch>'| \
        awk -F ' ' '{print $NF}' | \
        tr '\n' ' '
}
zle -N peco_select_from_git_allbranchs
function peco_insert_select_gitmerge(){
    LBUFFER="git merge $(peco_select_from_git_allbranchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_select_gitmerge
bindkey "^g^m" peco_insert_select_gitmerge

function peco_insert_vcsstatus(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER="git status"
    elif svn info>/dev/null 2>&1; then
        LBUFFER="svn status"
    else
        LBUFFER="ls"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_vcsstatus
bindkey "^g^s" peco_insert_vcsstatus

function peco_insert_vcsfetch(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER="git fetch"
    elif svn info>/dev/null 2>&1; then
        LBUFFER="svn update"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_vcsfetch
bindkey "^g^f" peco_insert_vcsfetch

function peco_insert_vcscommit(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER="git commit"
    elif svn info>/dev/null 2>&1; then
        LBUFFER="svn commit"
    else
        LBUFFER="ls"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_vcscommit
bindkey "^g^i" peco_insert_vcscommit

# Alias
case "${OSTYPE}" in
# MacOS用エイリアス
darwin*)
    alias inst='brew install'
    alias uninst='brew rm'
    alias update='brew update'
    alias upgrade='brew upgrade'
    alias ls='ls -lG'
    alias la='ls -alG'
    alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs'
    ;;
# Linux用エイリアス
linux*)
    alias inst='sudo apt-get install'
    alias uninst='sudo apt-get autoremove'
    alias update='sudo apt-get update'
    alias upgrade='sudo apt-get upgrade'
    alias ls='ls -l --color'
    alias la='ls -al --color'
    alias emacs='TERM=xterm-256color emacs'
    alias pdf='evince'
    ;;
esac
alias zreload='exec zsh'

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

alias latexmk='latexmk -pvc'
alias lmk='latexmk'
alias lmkc='\latexmk -c'
alias lmkC='\latexmk -C'
alias tmux='tmux -2'
alias tmuxa='tmux a'
alias tmuxn='tmux new-session \; source-file ~/.tmux-session'

# for my project
alias dic='ruby $HOME/workspace/project/dictionary/dict.rb'

# for lab-server ssh login
alias nanaco='ssh nanaco'
alias sashico='ssh sashico'
alias unico='ssh unico'
alias deco='ssh deco'
alias mico='ssh mico'
alias www='ssh www'

