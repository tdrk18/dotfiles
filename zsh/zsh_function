# 'finish'でプロセス終了を音で知らせる
function finish() {
    if [ $? -eq 0 ]; then
        afplay $HOME/Music/sounds/correct.mp3
    else
        afplay $HOME/Music/sounds/incorrect.mp3
    fi
}

# タブ名を'title hogehoge'でhogehogeに変更する
function title {
    echo -ne "\033]0;"$*"\007"
}

# 'presh <cmd>'であらかじめコマンドの一部<cmd>を入力された状態にする
function presh() {
    eval "__precmd_for_presh() {
        if [ $# -eq 0 ]; then
            print -z ''
        else
            print -z '$* '
        fi
    }"
    autoload -Uz add-zsh-hook
    add-zsh-hook precmd "__precmd_for_presh"
}

# terminal起動時にtmuxを立ち上げる
# 既にtmuxセッションがあればそれを選択できるようにする
function autostart_tmux() {
    if [[ ! -n $TMUX && $- == *l* ]]; then
        # get the IDs
        ID="`tmux list-sessions`"
        if [[ -z "$ID" ]]; then
            tmux new-session
        fi
        create_new_session="Create New Session"
        ID="$ID\n${create_new_session}:"
        ID="`echo $ID | ${PERCOL:=fzf} | cut -d: -f1`"
        if [[ "$ID" = "${create_new_session}" ]]; then
            tmux new-session
        elif [[ -n "$ID" ]]; then
            tmux attach-session -t "$ID"
        else
            :  # Start terminal normally
        fi
    fi
}

# pecoを使ってコマンド履歴を表示する
function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER" --prompt='History>')
    CURSOR=$#BUFFER
}
zle -N peco-select-history

# fzfを使ってコマンド履歴を表示する
function fzf-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        fzf-tmux --query "$LBUFFER" --prompt='History>')
    CURSOR=$#BUFFER
}
zle -N fzf-select-history

function peco-find() {
    local current_buffer=$BUFFER
    local search_root=""
    local file_path=""
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        search_root=`git rev-parse --show-toplevel`
    else
        search_root=`pwd`
    fi
    file_path="$(find ${search_root} -maxdepth 5 -type d ! -path "*/.*" | peco --prompt='Find>')"
    BUFFER="${current_buffer} ${file_path}"
    CURSOR=$#BUFFER
    # zle clear-screen
    zle accept-line
}
zle -N peco-find

function fzf-find() {
    local current_buffer=$BUFFER
    local search_root=""
    local file_path=""
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        search_root=`git rev-parse --show-toplevel`
    else
        search_root=`pwd`
    fi
    file_path="$(find ${search_root} -maxdepth 5 -type d ! -path "*/.*" | \
        fzf-tmux --prompt='Find>')"
    BUFFER="${current_buffer} ${file_path}"
    CURSOR=$#BUFFER
    # zle clear-screen
    zle accept-line
}
zle -N fzf-find

function peco_select_from_git_status(){
    git status --short | \
        peco --prompt='git status>'| \
        cut -c 4- | \
        tr '\n' ' '
}
function peco_insert_selected_git_files(){
    LBUFFER+=$(peco_select_from_git_status)
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_selected_git_files

function fzf_select_from_git_status(){
    git status --short | \
        fzf-tmux -m --prompt='git status>'| \
        cut -c 4- | \
        tr '\n' ' '
}
function fzf_insert_selected_git_files(){
    LBUFFER+=$(fzf_select_from_git_status)
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N fzf_insert_selected_git_files

function peco_select_from_svn_status(){
    svn status | \
    peco --prompt='svn status>'| \
    awk -F ' ' '{print $NF}' | \
    tr '\n' ' '
}
function peco_insert_selected_svn_files(){
    LBUFFER+=$(peco_select_from_svn_status)
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_selected_svn_files

function fzf_select_from_svn_status(){
    svn status | \
    fzf-tmux -m --prompt='svn status>'| \
    awk -F ' ' '{print $NF}' | \
    tr '\n' ' '
}
function fzf_insert_selected_svn_files(){
    LBUFFER+=$(fzf_select_from_svn_status)
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N fzf_insert_selected_svn_files

function peco_insert_select_vcsadd(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER+="git add $(peco_select_from_git_status)"
    elif svn info>/dev/null 2>&1; then
        LBUFFER+="svn add $(peco_select_from_svn_status)"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_select_vcsadd

function fzf_insert_select_vcsadd(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER+="git add $(fzf_select_from_git_status)"
    elif svn info>/dev/null 2>&1; then
        LBUFFER+="svn add $(fzf_select_from_svn_status)"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N fzf_insert_select_vcsadd

function peco_insert_select_vcsdiff(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        if git dsf > /dev/null 2>&1; then
            LBUFFER+="git dsf $(peco_select_from_git_status)"
        elif git icdiff > /dev/null 2>&1; then
            LBUFFER+="git icdiff $(peco_select_from_git_status)"
        else
            LBUFFER+="git diff $(peco_select_from_git_status)"
        fi
    elif svn info>/dev/null 2>&1; then
        LBUFFER+="svn diff $(peco_select_from_svn_status)"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_select_vcsdiff

function fzf_insert_select_vcsdiff(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        if git dsf > /dev/null 2>&1; then
            LBUFFER+="git dsf $(fzf_select_from_git_status)"
        elif git icdiff > /dev/null 2>&1; then
            LBUFFER+="git icdiff $(fzf_select_from_git_status)"
        else
            LBUFFER+="git diff $(fzf_select_from_git_status)"
        fi
    elif svn info>/dev/null 2>&1; then
        LBUFFER+="svn diff $(fzf_select_from_svn_status)"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N fzf_insert_select_vcsdiff

function peco_select_from_git_branchs(){
    git branch --list | \
        peco --prompt='Branch>'| \
        awk -F ' ' '{print $NF}' | \
        tr '\n' ' '
}
zle -N peco_select_from_git_branchs

function fzf_select_from_git_branchs(){
    git branch --list | \
        fzf-tmux -m --prompt='Branch>'| \
        awk -F ' ' '{print $NF}' | \
        tr '\n' ' '
}
zle -N fzf_select_from_git_branchs

function peco_insert_select_gitcheckout(){
    LBUFFER+="git checkout $(peco_select_from_git_branchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_select_gitcheckout

function fzf_insert_select_gitcheckout(){
    LBUFFER+="git checkout $(fzf_select_from_git_branchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N fzf_insert_select_gitcheckout

function peco_select_from_git_remotes(){
    git remote | \
        peco --prompt='Remote>'| \
        tr '\n' ' '
}
zle -N peco_select_from_git_remotes

function fzf_select_from_git_remotes(){
    git remote | \
        fzf-tmux -m --prompt='Remote>'| \
        tr '\n' ' '
}
zle -N fzf_select_from_git_remotes

function peco_insert_select_gitpush(){
    LBUFFER="git push $(peco_select_from_git_remotes) $(peco_select_from_git_branchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_select_gitpush

function fzf_insert_select_gitpush(){
    LBUFFER="git push $(fzf_select_from_git_remotes) $(fzf_select_from_git_branchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N fzf_insert_select_gitpush

function peco_insert_select_gitpull(){
    LBUFFER="git pull $(peco_select_from_git_remotes) $(peco_select_from_git_branchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_select_gitpull

function fzf_insert_select_gitpull(){
    LBUFFER="git pull $(fzf_select_from_git_remotes) $(fzf_select_from_git_branchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N fzf_insert_select_gitpull

function peco_select_from_git_allbranchs(){
    git branch --all | \
        peco --prompt='Branch>'| \
        awk -F ' ' '{print $NF}' | \
        tr '\n' ' '
}
zle -N peco_select_from_git_allbranchs

function fzf_select_from_git_allbranchs(){
    git branch --all | \
        fzf-tmux -m --prompt='Branch>'| \
        awk -F ' ' '{print $NF}' | \
        tr '\n' ' '
}
zle -N fzf_select_from_git_allbranchs

function peco_insert_select_gitmerge(){
    LBUFFER="git merge $(peco_select_from_git_allbranchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_select_gitmerge

function fzf_insert_select_gitmerge(){
    LBUFFER="git merge $(fzf_select_from_git_allbranchs)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N fzf_insert_select_gitmerge

function peco_insert_vcsstatus(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER="git status"
    elif svn info>/dev/null 2>&1; then
        LBUFFER="svn status"
    else
        LBUFFER="ls"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_vcsstatus

function peco_insert_vcsfetch(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER="git fetch"
    elif svn info>/dev/null 2>&1; then
        LBUFFER="svn update"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_vcsfetch

function peco_insert_vcscommit(){
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        LBUFFER="git commit"
    elif svn info>/dev/null 2>&1; then
        LBUFFER="svn commit"
    else
        LBUFFER="ls"
    fi
    CURSOR=$#LBUFFER
    zle reset-prompt
    zle accept-line
}
zle -N peco_insert_vcscommit

# ghqの一覧をpecoで選択して移動
function peco_select_ghq_list(){
    ghq list | \
        peco --prompt='ghq list>'| \
        awk -F ' ' '{print $NF}' | \
        tr '\n' ' '
}
zle -N peco_select_ghq_list
function peco_insert_ghq_list(){
    LBUFFER="cd $(ghq root)/$(peco_select_ghq_list)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_ghq_list

# tmuxのセッションをpecoで選択してattach
function peco_select_tmux_session_list(){
    tmux ls </dev/null | \
        peco --prompt='tmux session>'| \
        awk -F':' '{print $1}' | \
        tr '\n' ' '
}
zle -N peco_select_tmux_session_list
function peco_insert_tmux_session_list(){
    LBUFFER="tmux a -t $(peco_select_tmux_session_list)"
    CURSOR=$#LBUFFER
    zle reset-prompt
}
zle -N peco_insert_tmux_session_list

# sshの接続先をfzfで選択
function fzf-select-ssh-host(){
  local host="$(egrep -i '^Host\s+.+' $HOME/.ssh/config | egrep -v '[*?]' | awk '{print $2}' | sort | fzf)"

  if [ ! -z "$host" ]; then
    LBUFFER="ssh $host"
    CURSOR=$#LBUFFER
  fi
  zle reset-prompt
}
zle -N fzf-select-ssh-host

# docker image 一覧から起動する image を選択する
function peco-select-docker-image-run(){
  local docker_image="$(docker images | grep -v "REPOSITORY" | awk '{print $3}' | peco)"
  LBUFFER="docker run -ti -d $docker_image /bin/bash"
  zle reset-prompt
}
zle -N peco-select-docker-image-run

# 最近使ったファイル一覧をfzfで見る
function mru() {
    local -a f
    f=(
    ~/.vim_mru_files(N)
    ~/.unite/file_mru(N)
    ~/.cache/ctrlp/mru/cache.txt(N)
    ~/.frill(N)
    )
    if [[ $#f -eq 0 ]]; then
        echo "There is no available MRU Vim plugins" >&2
        return 1
    fi

    local cmd q k res
    local line ok make_dir i arr
    local get_styles styles style
    while : ${make_dir:=0}; ok=("${ok[@]:-dummy_$RANDOM}"); cmd="$(
        cat <$f \
            | while read line; do [ -e "$line" ] && echo "$line"; done \
            | while read line; do [ "$make_dir" -eq 1 ] && echo "${line:h}/" || echo "$line"; done \
            | awk '!a[$0]++' \
            | perl -pe 's/^(\/.*\/)(.*)$/\033[34m$1\033[m$2/' \
            | fzf --ansi --multi --query="$q" \
            --no-sort --exit-0 --prompt="MRU> " \
            --print-query --expect=ctrl-v,ctrl-x,ctrl-l,ctrl-q,ctrl-r,"?"
            )"; do
        q="$(head -1 <<< "$cmd")"
        k="$(head -2 <<< "$cmd" | tail -1)"
        res="$(sed '1,2d;/^$/d' <<< "$cmd")"
        [ -z "$res" ] && continue
        case "$k" in
            "?")
                cat <<HELP > /dev/tty
usage: vim_mru_files
    list up most recently files
keybind:
  ctrl-q  output files and quit
  ctrl-l  less files under the cursor
  ctrl-v  vim files under the cursor
  ctrl-r  change view type
  ctrl-x  remove files (two-step)
HELP
                return 1
                ;;
            ctrl-r)
                if [ $make_dir -eq 1 ]; then
                    make_dir=0
                else
                    make_dir=1
                fi
                continue
                ;;
            ctrl-l)
                export LESS='-R -f -i -P ?f%f:(stdin). ?lb%lb?L/%L.. [?eEOF:?pb%pb\%..]'
                arr=("${(@f)res}")
                if [[ -d ${arr[1]} ]]; then
                    ls -l "${(@f)res}" < /dev/tty | less > /dev/tty
                else
                    if (( $+commands[pygmentize] )); then
                        get_styles="from pygments.styles import get_all_styles
                        styles = list(get_all_styles())
                        print('\n'.join(styles))"
                        styles=( $(sed -e 's/^  *//g' <<<"$get_styles" | python) )
                        style=${${(M)styles:#solarized}:-default}
                        export LESSOPEN="| pygmentize -O style=$style -f console256 -g %s"
                    fi
                    less "${(@f)res}" < /dev/tty > /dev/tty
                fi
                ;;
            ctrl-x)
                if [[ ${(j: :)ok} == ${(j: :)${(@f)res}} ]]; then
                    eval '${${${(M)${+commands[gomi]}#1}:+gomi}:-rm} "${(@f)res}" 2>/dev/null'
                    ok=()
                else
                    ok=("${(@f)res}")
                fi
                ;;
            ctrl-v)
                vim -p "${(@f)res}" < /dev/tty > /dev/tty
                ;;
            ctrl-q)
                echo "$res" < /dev/tty > /dev/tty
                return $status
                ;;
            *)
                echo "${(@f)res}"
                break
                ;;
        esac
    done
}
zle -N mru

